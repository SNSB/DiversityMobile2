{"version":3,"file":"authorization.js","sourceRoot":"","sources":["authorization.ts"],"names":[],"mappings":"AAAA,IAAO,WAAW,WAAW,kBAAkB,CAAC,CAAC;AAUjD,iBAAS,WAAW,CAAC;IACjB,IAAI,EAAE,UAAU,MAAc;QAC1B,MAAM,CAAC,MAAe,CAAC;IAC3B,CAAC;IACD,OAAO,EAAE,UAAU,OAAO,EAAE,MAAM,EAAE,IAAI;QACpC,EAAE,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;YACf,IAAI,OAAO,GAAG,OAAO,CAAC,OAAO,IAAI,CAAC,OAAO,CAAC,OAAO,GAAG,EAAE,CAAC,CAAC;YACxD,OAAO,CAAC,eAAe,CAAC,GAAG,SAAS,GAAG,MAAM,CAAC,KAAK,CAAC;QACxD,CAAC;QAED,MAAM,CAAC,OAAO,CAAC;IACnB,CAAC;IACD,KAAK,EAAE,UAAU,QAAQ,EAAE,MAAM,EAAE,IAAI;QACnC,6CAA6C;QAC7C,EAAE,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,IAAI,GAAG,CAAC,CAAC,CAAC;QAElC,CAAC;QACD,MAAM,CAAC,QAAQ,CAAC;IACpB,CAAC;CACJ,CAAC,CAAC","sourcesContent":["import interceptor = require('rest/interceptor');\r\n\r\ninterface Config {\r\n    token?: String;\r\n    //api_base?: String;\r\n}\r\n\r\ninterface State extends Config {\r\n}\r\n\r\nexport = interceptor({\r\n    init: function (config: Config) {\r\n        return config as State;\r\n    },\r\n    request: function (request, config, meta) {\r\n        if (config.token) {\r\n            var headers = request.headers || (request.headers = {});\r\n            headers[\"Authorization\"] = \"bearer \" + config.token;\r\n        }\r\n\r\n        return request;\r\n    },\r\n    error: function (response, config, meta) {\r\n        // Unauthorized? -> get a new token and retry\r\n        if (response.status.code == 401) {\r\n            // TODO\r\n        }\r\n        return response;\r\n    }\r\n});\r\n"]}